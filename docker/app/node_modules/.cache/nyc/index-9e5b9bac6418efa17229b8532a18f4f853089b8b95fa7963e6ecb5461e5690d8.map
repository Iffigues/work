{"version":3,"sources":["index.js"],"names":["create","logerror","loginfo","initApp","app","params","cb","host","port","handler","req","res","file","url","fs","readFile","__dirname","err","data","writeHead","end","on","listen","initEngine","io","socket","id","action","type","emit","promise","Promise","resolve","reject","require","createServer","stop","close","unref"],"mappings":";;;;;QAwCgBA,M,GAAAA,M;;AAxChB;;;;AACA;;;;;;AAEA,IAAMC,WAAW,qBAAM,cAAN,CAAjB;AAAA,IACIC,UAAU,qBAAM,aAAN,CADd;;AAGA,IAAMC,UAAU,SAAVA,OAAU,CAACC,GAAD,EAAMC,MAAN,EAAcC,EAAd,EAAqB;AAAA,MAC5BC,IAD4B,GACdF,MADc,CAC5BE,IAD4B;AAAA,MACtBC,IADsB,GACdH,MADc,CACtBG,IADsB;;AAEnC,MAAMC,UAAU,SAAVA,OAAU,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC5B,QAAMC,OAAOF,IAAIG,GAAJ,KAAY,YAAZ,GAA2B,wBAA3B,GAAsD,mBAAnE;AACAC,iBAAGC,QAAH,CAAYC,YAAYJ,IAAxB,EAA8B,UAACK,GAAD,EAAMC,IAAN,EAAe;AAC3C,UAAID,GAAJ,EAAS;AACPhB,iBAASgB,GAAT;AACAN,YAAIQ,SAAJ,CAAc,GAAd;AACA,eAAOR,IAAIS,GAAJ,CAAQ,0BAAR,CAAP;AACD;AACDT,UAAIQ,SAAJ,CAAc,GAAd;AACAR,UAAIS,GAAJ,CAAQF,IAAR;AACD,KARD;AASD,GAXD;;AAaAd,MAAIiB,EAAJ,CAAO,SAAP,EAAkBZ,OAAlB;;AAEAL,MAAIkB,MAAJ,CAAW,EAACf,UAAD,EAAOC,UAAP,EAAX,EAAyB,YAAK;AAC5BN,kCAA4BG,OAAOQ,GAAnC;AACAP;AACD,GAHD;AAID,CArBD;;AAuBA,IAAMiB,aAAa,SAAbA,UAAa,KAAM;AACvBC,KAAGH,EAAH,CAAM,YAAN,EAAoB,UAASI,MAAT,EAAgB;AAClCvB,YAAQ,uBAAuBuB,OAAOC,EAAtC;AACAD,WAAOJ,EAAP,CAAU,QAAV,EAAoB,UAACM,MAAD,EAAY;AAC9B,UAAGA,OAAOC,IAAP,KAAgB,aAAnB,EAAiC;AAC/BH,eAAOI,IAAP,CAAY,QAAZ,EAAsB,EAACD,MAAM,MAAP,EAAtB;AACD;AACF,KAJD;AAKD,GAPD;AAQD,CATD;;AAWO,SAAS5B,MAAT,CAAgBK,MAAhB,EAAuB;AAC5B,MAAMyB,UAAU,IAAIC,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAChD,QAAM7B,MAAM8B,QAAQ,MAAR,EAAgBC,YAAhB,EAAZ;AACAhC,YAAQC,GAAR,EAAaC,MAAb,EAAqB,YAAK;AACxB,UAAMmB,KAAKU,QAAQ,WAAR,EAAqB9B,GAArB,CAAX;AACA,UAAMgC,OAAO,SAAPA,IAAO,CAAC9B,EAAD,EAAQ;AACnBkB,WAAGa,KAAH;AACAjC,YAAIiC,KAAJ,CAAW,YAAM;AACfjC,cAAIkC,KAAJ;AACD,SAFD;AAGApC;AACAI;AACD,OAPD;;AASAiB,iBAAWC,EAAX;AACAQ,cAAQ,EAACI,UAAD,EAAR;AACD,KAbD;AAcD,GAhBe,CAAhB;AAiBA,SAAON,OAAP;AACD","file":"index.js","sourceRoot":"/react/src/server","sourcesContent":["import fs  from 'fs'\nimport debug from 'debug'\n\nconst logerror = debug('tetris:error')\n  , loginfo = debug('tetris:info')\n\nconst initApp = (app, params, cb) => {\n  const {host, port} = params\n  const handler = (req, res) => {\n    const file = req.url === '/bundle.js' ? '/../../build/bundle.js' : '/../../index.html'\n    fs.readFile(__dirname + file, (err, data) => {\n      if (err) {\n        logerror(err)\n        res.writeHead(500)\n        return res.end('Error loading index.html')\n      }\n      res.writeHead(200)\n      res.end(data)\n    })\n  }\n\n  app.on('request', handler)\n\n  app.listen({host, port}, () =>{\n    loginfo(`tetris listen on ${params.url}`)\n    cb()\n  })\n}\n\nconst initEngine = io => {\n  io.on('connection', function(socket){\n    loginfo(\"Socket connected: \" + socket.id)\n    socket.on('action', (action) => {\n      if(action.type === 'server/ping'){\n        socket.emit('action', {type: 'pong'})\n      }\n    })\n  })\n}\n\nexport function create(params){\n  const promise = new Promise( (resolve, reject) => {\n    const app = require('http').createServer()\n    initApp(app, params, () =>{\n      const io = require('socket.io')(app)\n      const stop = (cb) => {\n        io.close()\n        app.close( () => {\n          app.unref()\n        })\n        loginfo(`Engine stopped.`)\n        cb()\n      }\n\n      initEngine(io)\n      resolve({stop})\n    })\n  })\n  return promise\n}\n"]}